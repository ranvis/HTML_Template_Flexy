

"IMPLEMENTATED NOTES" (fixed a bit) 0.4


as flexy has some dynamic form integration - it makes sense to reduce the work 
involved and utilize the quickforms package to provide dynamic forms, this little
document is to explore the interface between the two packages...




PHP code side logic:
<?

$template = new HTML_Template_Flexy;
$template->compile('somehtmlform.html');
$template->setQuickFormData($dataObject); 
            // uses an object to set the defaults // sets up $template->quickForm
            
            

$template->quickform->elements['xyz']->loadArray($dataObject->getSelectOptions('xyz');




if ($template->quickform->validate()) {
    $template->quickform->freeze();
    
    $original = $dataObject;
    $dataObject->setFrom($quickForm->getSubmitValues());
    ...
    goto another page...
} 
// change this to display?? - 
$template->output();
?>




Compiling side...

on the compile template .. - if it compiles (eg. the file has changed..)

** SERIALIZING FAILED - due to the load order that quickforms works on.

- The parser generates an array of arguments and function calls to build the quickforms at runtime.
        

// extra available data..?
{this.quickform.getRequiredNote()}



// Additional methods defined in HTML_Template_Flexy_Quickfrom and available via $template->template->XXXXX()


    
    hideElement($name) // makes an element invisible
    
    
    
    Semi Private
    buildElementsArray($formnumber | $name); //loads a form's elements into $template->quickfrom->elements[$name]
    
    formHeadtoHtml                      - writes javascript, form element and hidden attributes
    elementToHtml($elementname )        - which wraps   $this->_buildElement($this->_elements[$elementname]);
     
    loadFromSerialFile($filename)       - used by setQuickFormData to load serialized quickform.
    
    addElementDef($def)                 - used by parser to build a definition for the form 



FORM: 
    // in the template
    <form name="xxxx" action="...." filter="trim">
    
    // creates php code in the compiled template:
   
    <?php echo $this->quickForm->formHeadToHtml() ?>
        
    ($this refers to the template object for those that dont know flexy :)
    // creates datafile? or builds as it parses (then serializes)
    
    $quickForm = new HTML_QuickForm('xxxx');
    $quickForm->applyFilter('__ALL__','trim');
    
 
    
INPUT: (text)    
    // in the template
    <input type="text" name="xxxx" 
            rule = "required,This is a required field" 
            rule = "minlength,5,Test must be minimum 5 characters">
    
    // creates php code in the compiled template:
    
    <?php echo $this->quickForm->elementToHtml("xxxx"); ?>

    // creates datafile? or builds as it parses (then serializes)
    
    $quickForm->addElement('text','xxxx',.....)
    $quickForm->addRule("xxxx","Test is a required field","required");
    $quickForm->addRule("xxxx", "Test must be minimum 5 characters");
    
    
    

INPUT: (hidden)
    // in the template
    <input type="hidden" name="xxxx" value="xxxx" flexyvar="yyyyy" .....>
    
    // creates a template element:
    
     = nothing - hidden elements are appended after form automatically (so you can add to them)
    
    // this should be an extra method in QForms to do :
    
    // creates datafile?
    
    $quickForm->addElement('hidden','xxxx',.....)  
    
    
  

mulitple forms on one template..


    $template->setActiveQuickform('xxx');
    // will load all the elements into $template->quickforms->elements[]
    
    
    
/*------------------------------------------------------------------------------*/

May 17th 2003 - Issues with present solution

Having gone about 2/3 of the way through quite a large project using QuickForms/Flexy integration, I'm now
far more aware of the issues related to the current implemented design.

One of the key results of this overview may be the removal of the HTML_QuickFrom base class from the design.




a) The form storage routine 
    - producing a serialized set of functions and arguments to call on startup is messy!
    - this is primarily a result of the inability to serialize quickforms, due to the way it has code 
    in the constructor which is state dependant. (eg. messing around with $_POST/$_GET).

    - this may be solved by serializing the Elements, rather than the Quickform it'self. and creating a
    new Quickform at runtime. (or just replacing the Top level class???) see notes later.
   

b)  The requirement to load flexy directly was added in the last version, I would prefer for flexy to appear to
    be a last stage process. so the body of the code does not deal with templates, and it's only called at ouput
    time.

    There needs to be a way to retrieve the validation data from a form however, so you must specify the template
    at some point in the process...
    
    
    
    $flexyQuickform =  HTML_Template_Flexy_Quickform::load('templatepath/templatename.html');
    
    
    this leads on to the ability to fetch information about an object:
    
    $defined_in_html = $flexyQuickform->getData('optional_formname.elementname', 'value');
   
   
   
c) The api to access and change information is very messy...
     $template->quickform->elements["xxxx"]->loadArray(....);
    
    It would be more sensible to use somthing like this.
    
    
    
    
    $flexyQuickfrom->setElementValues($dataobject->toArray());
    // eg.
    $flexyQuickfrom->setElementValues(array('name'=>'fred'));
    
    
    
    // or setting more complex details about an element..
    
    $flexyQuickform->setElement( "optional_formname.elementname", array(
            'value'   => '12'.
            'options' => $array,
            'rule'    => $xxxx,
        ));
        
        
    
    // nice acces to error data.
    // is there any reason not to have a public array for this???
    
    $flexyQuickfrom->errors['optional_formname.elementname']  = "XXXXX";
    
    // OR should all element settings be made available like this?
    
    $flexyQuickfrom->values  ['optional_formname.elementname']  = "XXXXX";
    $flexyQuickfrom->defaults['optional_formname.elementname']  = "XXXXX";
    $flexyQuickfrom->options ['optional_formname.elementname']  = "XXXXX";
    $flexyQuickfrom->rules   ['optional_formname.elementname']  = "XXXXX";
    $flexyQuickfrom->labels  ['optional_formname.elementname']  = "XXXXX";
    
    
    
    
    
    
    
    
    
    
    
    
    
    and use optional_formname.elementname.1 for things like radios where the same name is assigned to multiple elements.


d)  validation should really use the validation class,
           
    $quickform->validate($_POST);
    
    // by default, if a rule was added in quickforms
    < a input="xxx" 
        flexy:rule="validate::date" 
        flexy:ruleformat="%d/%m/%Y" 
        flexy:rulemin="01-01-2000" 
        flexy:rulemax="01-01-2004" 
        flexy:ruleerror="xxxxxxx">
    
    it should relate to the validate class.
    
    if alternative validatoin methods are used:
    < a input="xxx" 
        flexy:rule="MyProject_Validate::date|%d/%m/%Y|01-01-2000|01-01-2004|xxxxxxx">
    
    what syntax is good here? = none! ?
    
    
    
    
    
e) Some of the utility  methods   may be unnessecary.

    moveUploadedFile - 
    
    
    
f) loading order...
    
    aims of revamping:
        - form should not be required to be loaded, unless key information from it is required... (like validation)
        - form should not interact with $_POST/$_GET until it is rendered. (or default overlays??)
        
    Template and QF loading is not visably intertwined..
    
    $flexyQuickform =  HTML_Template_Flexy_Quickform::load('templatepath/templatename.html');
  
    
    ...
    $template = new HTML_Template_Flexy;
    $template->compile('templatepath/templatename.html');
    $template->output($this,$flexyQuickform);
    
    
    

g) adding elements at runtime.

    in coding with flexy/qf I came accros one situation where I needed to add elements at runtime/rather than doing this 
    in some way at code time.
    
    <tr flexy:foreach="children,child"><td>
        <select name="child%s" flexy:withvar="child.id"><option>...</option></select>
    </td></tr>
    
    would create an unknown number of quickform elements.
    
    to do this would require the ability to build and render the form elements at runtime.
    
    <?php $this->quickform->elementToHTML('formname.child%s',$child->id); ?>
    
    elementToHTML currently just looks up the element object in 
        $qf->elements[] and runs toHTML on it..
    
    in this case it would have to 
    
        generate a new element, (based on the stub type..)
        overlay any settings from setElementValues
        render it.
 
    
g) BC!    
    
    basically a revamp of this size would totally break bc for flexy 'again'!.. 
    
    There is little to no way of realistically keeping BC without making a very messy codebase..
    
    Before all this is started, releasing the current code as a bugfix for the last release is probably necessary.
    
    ... or base the new stuff of a merged Xipe base? - which needs another rfc/thoughts... 
    
    














    
    