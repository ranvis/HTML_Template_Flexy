<?php
/* vim: set expandtab tabstop=4 shiftwidth=4: */
// +----------------------------------------------------------------------+
// | PHP Version 4                                                        |
// +----------------------------------------------------------------------+
// | Copyright (c) 1997-2002 The PHP Group                                |
// +----------------------------------------------------------------------+
// | This source file is subject to version 2.02 of the PHP license,      |
// | that is bundled with this package in the file LICENSE, and is        |
// | available at through the world-wide-web at                           |
// | http://www.php.net/license/2_02.txt.                                 |
// | If you did not receive a copy of the PHP license and are unable to   |
// | obtain it through the world-wide-web, please send a note to          |
// | license@php.net so we can mail you a copy immediately.               |
// +----------------------------------------------------------------------+
// | Authors:  nobody <nobody@localhost>                                  |
// +----------------------------------------------------------------------+
//
// $Id$
//
//  The Source Lex file. (Tokenizer.lex) and the Generated one (Tokenizer.php)
// You should always work with the .lex file and generate by
//
// #mono phpLex/phpLex.exe Tokenizer.lex
//
//
// or the equivialant .NET runtime on windows...
//
//  Note need to change a few of these defines, and work out
// how to modifiy the lexer to handle the changes..
//
define('HTML_TEMPLATE_FLEXY_TOKEN_NONE',1);
define('HTML_TEMPLATE_FLEXY_TOKEN_OK',2);
define('HTML_TEMPLATE_FLEXY_TOKEN_ERROR',3);
define("YYINITIAL"     ,0);
define("IN_SINGLEQUOTE"     ,1) ;
define("IN_TAG"     ,2)  ;
define("IN_ATTR"     ,3);
define("IN_ATTRVAL"     ,4) ;
define("IN_NETDATA"     ,5);
define("IN_ENDTAG"     ,6);
define("IN_DOUBLEQUOTE"     ,7);
define("IN_MD"     ,8);
define("IN_COM"     ,9);
define("IN_DS"     ,10);
define("IN_FLEXYMETHOD"     ,10);
define('YY_E_INTERNAL', 0);
define('YY_E_MATCH',  1);
define('YY_BUFFER_SIZE', 4096);
define('YY_F' , -1);
define('YY_NO_STATE', -1);
define('YY_NOT_ACCEPT' ,  0);
define('YY_START' , 1);
define('YY_END' , 2);
define('YY_NO_ANCHOR' , 4);
define('YY_BOL' , 257);
define('YY_EOF' , 258);


class HTML_Template_Flexy_Tokenizer
{

    function dump () {
        foreach(get_object_vars($this) as  $k=>$v) {
            if (is_string($v)) { continue; }
            if (is_array($v)) { continue; }
            echo "$k = $v\n";
        }
    }
	function error($n,$s) {
        echo "Error $n: $s\n";
    }


    var $yy_reader;
    var $yy_buffer_index;
    var $yy_buffer_read;
    var $yy_buffer_start;
    var $yy_buffer_end;
    var $yy_buffer;
    var $yychar;
    var $yyline;
    var $yyEndOfLine;
    var $yy_at_bol;
    var $yy_lexical_state;

    function HTML_Template_Flexy_Tokenizer($data) 
    {
        $this->yy_buffer = $data;
        $this->yy_buffer_read = strlen($data);
        $this->yy_buffer_index = 0;
        $this->yy_buffer_start = 0;
        $this->yy_buffer_end = 0;
        $this->yychar = 0;
        $this->yyline = 0;
        $this->yy_at_bol = true;
        $this->yy_lexical_state = YYINITIAL;
    }

    var $yy_state_dtrans = array  ( 
        0,
        128,
        30,
        94,
        130,
        131,
        132,
        133,
        142,
        60,
        147,
        149
    );


    function yybegin ($state)
    {
        $this->yy_lexical_state = $state;
    }



    function yy_advance ()
    {
        if ($this->yy_buffer_index < $this->yy_buffer_read) {
            return ord($this->yy_buffer{$this->yy_buffer_index++});
        }
        return YY_EOF;
    }


    function yy_move_end ()
    {
        if ($this->yy_buffer_end > $this->yy_buffer_start && 
            '\n' == $this->yy_buffer{$this->yy_buffer_end-1})
        {
            $this->yy_buffer_end--;
        }
        if ($this->yy_buffer_end > $this->yy_buffer_start &&
            '\r' == $this->yy_buffer{$this->yy_buffer_end-1})
        {
            $this->yy_buffer_end--;
        }
    }


    var $yy_last_was_cr=false;


    function yy_mark_start ()
    {
        for ($i = $this->yy_buffer_start; $i < $this->yy_buffer_index; $i++) {
            if ($this->yy_buffer{$i} == "\n" && !$this->yy_last_was_cr) {
                $this->yyline++; $this->yyEndOfLine = $this->yychar;
            }
            if ($this->yy_buffer{$i} == "\r") {
                $this->yyline++; $this->yyEndOfLine = $this->yychar;
                $this->yy_last_was_cr=true;
            } else {
                $this->yy_last_was_cr=false;
            }
        }
        $this->yychar = $this->yychar + $this->yy_buffer_index - $this->yy_buffer_start;
        $this->yy_buffer_start = $this->yy_buffer_index;
    }


    function yy_mark_end ()
    {
        $this->yy_buffer_end = $this->yy_buffer_index;
    }


    function  yy_to_mark ()
    {
        $this->yy_buffer_index = $this->yy_buffer_end;
        $this->yy_at_bol = ($this->yy_buffer_end > $this->yy_buffer_start) &&
            ($this->yy_buffer{$this->yy_buffer_end-1} == '\r' ||
            $this->yy_buffer{$this->yy_buffer_end-1} == '\n');
    }


    function yytext()
    {
        return substr($this->yy_buffer,$this->yy_buffer_start,$this->yy_buffer_end - $this->yy_buffer_start);
    }


    function yylength ()
    {
        return $this->yy_buffer_end - $this->yy_buffer_start;
    }


    var $yy_error_string = array(
        "Error: Internal error.\n",
        "Error: Unmatched input.\n"
        );


    function yy_error ($code,$fatal)
    {
        echo $this->yy_error_string[$code];
        if ($fatal) {
            exit;
        }
    }


    var  $yy_acpt = array (
        /* 0 */   YY_NOT_ACCEPT,
        /* 1 */   YY_NO_ANCHOR,
        /* 2 */   YY_NO_ANCHOR,
        /* 3 */   YY_NO_ANCHOR,
        /* 4 */   YY_NO_ANCHOR,
        /* 5 */   YY_NO_ANCHOR,
        /* 6 */   YY_NO_ANCHOR,
        /* 7 */   YY_NO_ANCHOR,
        /* 8 */   YY_NO_ANCHOR,
        /* 9 */   YY_NO_ANCHOR,
        /* 10 */   YY_NO_ANCHOR,
        /* 11 */   YY_NO_ANCHOR,
        /* 12 */   YY_NO_ANCHOR,
        /* 13 */   YY_NO_ANCHOR,
        /* 14 */   YY_NO_ANCHOR,
        /* 15 */   YY_NO_ANCHOR,
        /* 16 */   YY_NO_ANCHOR,
        /* 17 */   YY_NO_ANCHOR,
        /* 18 */   YY_NO_ANCHOR,
        /* 19 */   YY_NO_ANCHOR,
        /* 20 */   YY_NO_ANCHOR,
        /* 21 */   YY_NO_ANCHOR,
        /* 22 */   YY_NO_ANCHOR,
        /* 23 */   YY_NO_ANCHOR,
        /* 24 */   YY_NO_ANCHOR,
        /* 25 */   YY_NO_ANCHOR,
        /* 26 */   YY_NO_ANCHOR,
        /* 27 */   YY_NO_ANCHOR,
        /* 28 */   YY_NO_ANCHOR,
        /* 29 */   YY_NO_ANCHOR,
        /* 30 */   YY_NO_ANCHOR,
        /* 31 */   YY_NO_ANCHOR,
        /* 32 */   YY_NO_ANCHOR,
        /* 33 */   YY_NO_ANCHOR,
        /* 34 */   YY_NO_ANCHOR,
        /* 35 */   YY_NO_ANCHOR,
        /* 36 */   YY_NO_ANCHOR,
        /* 37 */   YY_NO_ANCHOR,
        /* 38 */   YY_NO_ANCHOR,
        /* 39 */   YY_NO_ANCHOR,
        /* 40 */   YY_NO_ANCHOR,
        /* 41 */   YY_NO_ANCHOR,
        /* 42 */   YY_NO_ANCHOR,
        /* 43 */   YY_NO_ANCHOR,
        /* 44 */   YY_NO_ANCHOR,
        /* 45 */   YY_NO_ANCHOR,
        /* 46 */   YY_NO_ANCHOR,
        /* 47 */   YY_NO_ANCHOR,
        /* 48 */   YY_NO_ANCHOR,
        /* 49 */   YY_NO_ANCHOR,
        /* 50 */   YY_NO_ANCHOR,
        /* 51 */   YY_NO_ANCHOR,
        /* 52 */   YY_NO_ANCHOR,
        /* 53 */   YY_NO_ANCHOR,
        /* 54 */   YY_NO_ANCHOR,
        /* 55 */   YY_NO_ANCHOR,
        /* 56 */   YY_NO_ANCHOR,
        /* 57 */   YY_NO_ANCHOR,
        /* 58 */   YY_NO_ANCHOR,
        /* 59 */   YY_NO_ANCHOR,
        /* 60 */   YY_NO_ANCHOR,
        /* 61 */   YY_NO_ANCHOR,
        /* 62 */   YY_NO_ANCHOR,
        /* 63 */   YY_NO_ANCHOR,
        /* 64 */   YY_NO_ANCHOR,
        /* 65 */   YY_NO_ANCHOR,
        /* 66 */   YY_NO_ANCHOR,
        /* 67 */   YY_NO_ANCHOR,
        /* 68 */   YY_NO_ANCHOR,
        /* 69 */   YY_NOT_ACCEPT,
        /* 70 */   YY_NO_ANCHOR,
        /* 71 */   YY_NO_ANCHOR,
        /* 72 */   YY_NO_ANCHOR,
        /* 73 */   YY_NO_ANCHOR,
        /* 74 */   YY_NO_ANCHOR,
        /* 75 */   YY_NO_ANCHOR,
        /* 76 */   YY_NO_ANCHOR,
        /* 77 */   YY_NO_ANCHOR,
        /* 78 */   YY_NO_ANCHOR,
        /* 79 */   YY_NO_ANCHOR,
        /* 80 */   YY_NO_ANCHOR,
        /* 81 */   YY_NO_ANCHOR,
        /* 82 */   YY_NO_ANCHOR,
        /* 83 */   YY_NO_ANCHOR,
        /* 84 */   YY_NO_ANCHOR,
        /* 85 */   YY_NO_ANCHOR,
        /* 86 */   YY_NO_ANCHOR,
        /* 87 */   YY_NO_ANCHOR,
        /* 88 */   YY_NO_ANCHOR,
        /* 89 */   YY_NO_ANCHOR,
        /* 90 */   YY_NO_ANCHOR,
        /* 91 */   YY_NO_ANCHOR,
        /* 92 */   YY_NOT_ACCEPT,
        /* 93 */   YY_NO_ANCHOR,
        /* 94 */   YY_NO_ANCHOR,
        /* 95 */   YY_NO_ANCHOR,
        /* 96 */   YY_NO_ANCHOR,
        /* 97 */   YY_NO_ANCHOR,
        /* 98 */   YY_NOT_ACCEPT,
        /* 99 */   YY_NO_ANCHOR,
        /* 100 */   YY_NOT_ACCEPT,
        /* 101 */   YY_NO_ANCHOR,
        /* 102 */   YY_NOT_ACCEPT,
        /* 103 */   YY_NOT_ACCEPT,
        /* 104 */   YY_NOT_ACCEPT,
        /* 105 */   YY_NOT_ACCEPT,
        /* 106 */   YY_NOT_ACCEPT,
        /* 107 */   YY_NOT_ACCEPT,
        /* 108 */   YY_NOT_ACCEPT,
        /* 109 */   YY_NOT_ACCEPT,
        /* 110 */   YY_NOT_ACCEPT,
        /* 111 */   YY_NOT_ACCEPT,
        /* 112 */   YY_NOT_ACCEPT,
        /* 113 */   YY_NOT_ACCEPT,
        /* 114 */   YY_NOT_ACCEPT,
        /* 115 */   YY_NOT_ACCEPT,
        /* 116 */   YY_NOT_ACCEPT,
        /* 117 */   YY_NOT_ACCEPT,
        /* 118 */   YY_NOT_ACCEPT,
        /* 119 */   YY_NOT_ACCEPT,
        /* 120 */   YY_NOT_ACCEPT,
        /* 121 */   YY_NOT_ACCEPT,
        /* 122 */   YY_NOT_ACCEPT,
        /* 123 */   YY_NOT_ACCEPT,
        /* 124 */   YY_NOT_ACCEPT,
        /* 125 */   YY_NOT_ACCEPT,
        /* 126 */   YY_NOT_ACCEPT,
        /* 127 */   YY_NOT_ACCEPT,
        /* 128 */   YY_NOT_ACCEPT,
        /* 129 */   YY_NOT_ACCEPT,
        /* 130 */   YY_NOT_ACCEPT,
        /* 131 */   YY_NOT_ACCEPT,
        /* 132 */   YY_NOT_ACCEPT,
        /* 133 */   YY_NOT_ACCEPT,
        /* 134 */   YY_NOT_ACCEPT,
        /* 135 */   YY_NOT_ACCEPT,
        /* 136 */   YY_NOT_ACCEPT,
        /* 137 */   YY_NOT_ACCEPT,
        /* 138 */   YY_NOT_ACCEPT,
        /* 139 */   YY_NOT_ACCEPT,
        /* 140 */   YY_NOT_ACCEPT,
        /* 141 */   YY_NOT_ACCEPT,
        /* 142 */   YY_NOT_ACCEPT,
        /* 143 */   YY_NOT_ACCEPT,
        /* 144 */   YY_NOT_ACCEPT,
        /* 145 */   YY_NOT_ACCEPT,
        /* 146 */   YY_NOT_ACCEPT,
        /* 147 */   YY_NOT_ACCEPT,
        /* 148 */   YY_NOT_ACCEPT,
        /* 149 */   YY_NOT_ACCEPT,
        /* 150 */   YY_NOT_ACCEPT,
        /* 151 */   YY_NOT_ACCEPT,
        /* 152 */   YY_NOT_ACCEPT,
        /* 153 */   YY_NOT_ACCEPT,
        /* 154 */   YY_NOT_ACCEPT,
        /* 155 */   YY_NOT_ACCEPT,
        /* 156 */   YY_NOT_ACCEPT,
        /* 157 */   YY_NOT_ACCEPT,
        /* 158 */   YY_NO_ANCHOR,
        /* 159 */   YY_NO_ANCHOR,
        /* 160 */   YY_NOT_ACCEPT,
        /* 161 */   YY_NOT_ACCEPT,
        /* 162 */   YY_NOT_ACCEPT,
        /* 163 */   YY_NOT_ACCEPT,
        /* 164 */   YY_NOT_ACCEPT,
        /* 165 */   YY_NOT_ACCEPT,
        /* 166 */   YY_NOT_ACCEPT,
        /* 167 */   YY_NOT_ACCEPT,
        /* 168 */   YY_NOT_ACCEPT,
        /* 169 */   YY_NOT_ACCEPT,
        /* 170 */   YY_NOT_ACCEPT,
        /* 171 */   YY_NOT_ACCEPT,
        /* 172 */   YY_NOT_ACCEPT,
        /* 173 */   YY_NOT_ACCEPT,
        /* 174 */   YY_NOT_ACCEPT,
        /* 175 */   YY_NOT_ACCEPT,
        /* 176 */   YY_NOT_ACCEPT,
        /* 177 */   YY_NOT_ACCEPT,
        /* 178 */   YY_NOT_ACCEPT
        );


    var  $yy_cmap = array(
        24, 24, 24, 24, 24, 24, 24, 24,
        24, 10, 5, 24, 24, 11, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24,
        10, 13, 23, 2, 25, 26, 1, 22,
        48, 49, 25, 19, 39, 14, 7, 9,
        3, 3, 3, 3, 3, 3, 3, 45,
        3, 3, 30, 4, 8, 21, 12, 17,
        24, 6, 46, 6, 47, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 15, 20, 16, 27, 31,
        24, 36, 46, 37, 41, 35, 29, 6,
        38, 28, 6, 6, 42, 6, 40, 33,
        6, 6, 34, 43, 6, 44, 6, 6,
        6, 6, 6, 18, 27, 32, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24,
        24, 0, 0 
         );


    var $yy_rmap = array(
        0, 1, 2, 3, 4, 5, 1, 6,
        7, 8, 1, 9, 1, 10, 1, 3,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 11, 1, 12, 1,
        1, 1, 13, 14, 15, 1, 16, 17,
        16, 1, 16, 1, 18, 1, 1, 19,
        1, 1, 1, 20, 21, 22, 1, 1,
        23, 24, 25, 26, 27, 1, 28, 29,
        1, 1, 1, 1, 1, 30, 31, 32,
        1, 33, 1, 1, 34, 35, 36, 16,
        37, 38, 39, 40, 41, 42, 43, 44,
        45, 1, 46, 47, 48, 49, 50, 51,
        52, 53, 54, 55, 56, 57, 58, 59,
        60, 61, 62, 63, 64, 65, 66, 67,
        68, 69, 70, 71, 72, 73, 74, 75,
        76, 77, 78, 79, 80, 81, 82, 83,
        84, 14, 85, 86, 87, 88, 89, 90,
        91, 92, 93, 94, 92, 95, 96, 41,
        53, 97, 98, 99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 51,
        111, 112, 40, 113, 114, 115, 116, 117,
        118, 119, 120, 121, 122, 123, 124, 125,
        126, 127, 128 
        );


    var $yy_nxt = array(
        array( 1, 2, 3, 3, 3, 3, 3, 3,
            70, 3, 3, 3, 3, 3, 3, 3,
            158, 3, 71, 3, 3, 3, 3, 3,
            3, 3, 3, 3, 3, 3, 3, 3,
            3, 3, 3, 3, 3, 3, 3, 3,
            3, 3, 3, 3, 3, 3, 3, 3,
            3, 3 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, 69, 3, 3, 3, 4, 3,
            -1, 3, 3, 3, 3, 3, 3, 3,
            3, 3, 3, 3, 3, 3, 3, 3,
            3, 3, 3, 3, 4, 4, 3, 3,
            3, 4, 4, 4, 4, 4, 4, 3,
            4, 4, 4, 4, 4, 3, 4, 4,
            3, 3 ),
        array( -1, 92, 3, 3, 3, 3, 3, 3,
            98, 3, 3, 3, 3, 3, 3, 3,
            3, 3, -1, 3, 3, 3, 3, 3,
            3, 3, 3, 3, 3, 3, 3, 3,
            3, 3, 3, 3, 3, 3, 3, 3,
            3, 3, 3, 3, 3, 3, 3, 3,
            3, 3 ),
        array( -1, -1, -1, 4, 72, 72, 4, 4,
            -1, -1, -1, -1, -1, -1, 4, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 4, 4, -1, -1,
            -1, 4, 4, 4, 4, 4, 4, -1,
            4, 4, 4, 4, 4, 4, 4, 4,
            -1, -1 ),
        array( -1, -1, -1, 5, -1, 73, 5, 5,
            -1, -1, 73, 73, -1, -1, 5, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 5, 5, -1, -1,
            -1, 5, 5, 5, 5, 5, 5, -1,
            5, 5, 5, 5, 5, 5, 5, 5,
            -1, -1 ),
        array( -1, -1, -1, 7, 74, 74, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, 7, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, 8, 75, 75, 8, 8,
            -1, -1, -1, -1, -1, -1, 8, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 8, 8, -1, -1,
            -1, 8, 8, 8, 8, 8, 8, -1,
            8, 8, 8, 8, 8, 8, 8, 8,
            -1, -1 ),
        array( -1, -1, -1, 9, -1, 76, 9, 9,
            -1, 106, 76, 76, -1, -1, 9, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 9, 9, -1, -1,
            -1, 9, 9, 9, 9, 9, 9, -1,
            9, 9, 9, 9, 9, 9, 9, 9,
            -1, -1 ),
        array( -1, -1, -1, 11, -1, 77, 11, 11,
            -1, -1, 77, 77, -1, -1, 11, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 11, 11, -1, -1,
            -1, 11, 11, 11, 11, 11, 11, -1,
            11, 11, 11, 11, 11, 11, 11, 11,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, 13, -1, -1,
            -1, -1, 13, 13, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, 28, 28, 28, 28, 28, 28, 28,
            28, 28, 28, 28, 28, 28, 28, -1,
            -1, 28, 28, -1, -1, 28, -1, 28,
            28, 28, 28, -1, 28, 28, 28, 28,
            28, 28, 28, 28, 28, 28, 28, 28,
            28, 28, 28, 28, 28, 28, 28, 28,
            28, 28 ),
        array( 1, 31, 31, 31, 31, 78, 31, 31,
            32, 31, 78, 78, 33, 31, 31, 31,
            31, 31, 31, 31, 31, 31, 31, 31,
            31, 31, 31, 31, 31, 31, 31, 31,
            31, 31, 31, 31, 31, 31, 31, 31,
            31, 31, 31, 31, 31, 31, 31, 31,
            31, 31 ),
        array( -1, -1, -1, 34, -1, 80, 34, 34,
            -1, -1, 80, 80, -1, -1, 34, -1,
            -1, -1, -1, -1, -1, 36, -1, -1,
            -1, -1, -1, -1, 34, 34, -1, -1,
            -1, 34, 34, 34, 34, 34, 34, -1,
            34, 34, 34, 34, 34, 34, 34, 34,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, 129, -1, -1,
            -1, -1, 129, 129, 37, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, 36, -1, -1,
            -1, -1, 36, 36, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, 38, 38, 38, 38, 81, 38, 38,
            38, 38, 81, 81, -1, 38, 38, 38,
            38, 38, 38, 38, 38, 38, 38, -1,
            38, 38, 38, 38, 38, 38, 38, 38,
            38, 38, 38, 38, 38, 38, 38, 38,
            38, 38, 38, 38, 38, 38, 38, 38,
            38, 38 ),
        array( -1, 38, 38, 39, 38, 82, 39, 39,
            38, 38, 82, 82, -1, 38, 39, 38,
            38, 38, 38, 38, 38, 38, 38, -1,
            38, 38, 38, 38, 39, 39, 38, 38,
            38, 39, 39, 39, 39, 39, 39, 38,
            39, 39, 39, 39, 39, 39, 39, 39,
            38, 38 ),
        array( -1, -1, -1, -1, -1, 44, -1, -1,
            -1, -1, 44, 44, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, 47, 47, 47, 47, 47, 47, 47,
            47, 47, 47, 47, 47, 47, 47, 47,
            47, 47, -1, 47, 134, 47, 47, -1,
            47, 47, -1, 47, 47, 47, 47, 47,
            47, 47, 47, 47, 47, 47, 47, 47,
            47, 47, 47, 47, 47, 47, 47, 47,
            47, 47 ),
        array( -1, -1, -1, 51, -1, 85, 56, 56,
            -1, -1, 85, 85, -1, -1, 56, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 56, 56, -1, -1,
            -1, 56, 56, 56, 56, 56, 56, -1,
            56, 56, 56, 56, 56, 51, 56, 56,
            -1, -1 ),
        array( -1, -1, -1, 52, -1, 86, 52, 52,
            -1, -1, 86, 86, -1, -1, 52, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 52, 52, -1, -1,
            -1, 52, 52, 52, 52, 52, 52, -1,
            52, 52, 52, 52, 52, 52, 52, 52,
            -1, -1 ),
        array( -1, -1, -1, 53, -1, 87, 53, 53,
            -1, -1, 87, 87, -1, -1, 53, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 53, 53, -1, -1,
            -1, 53, 53, 53, 53, 53, 53, -1,
            53, 53, 53, 53, 53, 53, 53, 53,
            -1, -1 ),
        array( -1, -1, -1, 56, -1, 88, 56, 56,
            -1, -1, 88, 88, -1, -1, 56, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 56, 56, -1, -1,
            -1, 56, 56, 56, 56, 56, 56, -1,
            56, 56, 56, 56, 56, 56, 56, 56,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, 57, -1, -1,
            -1, -1, 57, 57, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, 58, -1, -1,
            -1, -1, 58, 58, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, 59, 90, 90, 59, 59,
            -1, -1, 90, 90, -1, -1, 59, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 59, 59, -1, -1,
            -1, 59, 59, 59, 59, 59, 59, -1,
            59, 59, 59, 59, 59, 59, 59, 59,
            -1, -1 ),
        array( 1, 91, 91, 91, 91, 91, 91, 91,
            91, 91, 91, 91, 91, 91, 101, 91,
            91, 91, 91, 91, 91, 91, 91, 91,
            91, 91, 91, 91, 91, 91, 91, 91,
            91, 91, 91, 91, 91, 91, 91, 91,
            91, 91, 91, 91, 91, 91, 91, 91,
            91, 91 ),
        array( -1, 62, 62, 62, 62, 62, 62, 62,
            62, 62, 62, 62, 62, 62, 62, 62,
            -1, 62, 62, 62, 62, 62, 62, 62,
            62, 62, 62, 62, 62, 62, 62, 62,
            62, 62, 62, 62, 62, 62, 62, 62,
            62, 62, 62, 62, 62, 62, 62, 62,
            62, 62 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            148, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, 7, -1, -1, 8, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 8, 8, -1, -1,
            -1, 8, 8, 8, 8, 8, 8, -1,
            8, 8, 8, 8, 8, 7, 8, 8,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, 3, 5, -1,
            -1, 100, 3, 3, 6, 102, -1, 3,
            3, 103, 3, -1, 3, -1, -1, -1,
            3, -1, -1, 3, 5, 5, -1, 3,
            3, 5, 5, 5, 5, 5, 5, -1,
            5, 5, 5, 5, 5, -1, 5, 5,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, -1, 104, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 160, 178, -1, -1,
            -1, 104, 104, 168, 104, 104, 104, -1,
            104, 104, 104, 104, 104, -1, 104, 104,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, 73, -1, -1,
            -1, -1, 73, 73, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, 76, -1, -1,
            -1, 106, 76, 76, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, 77, -1, -1,
            -1, -1, 77, 77, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, 78, -1, -1,
            -1, -1, 78, 78, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, 80, -1, -1,
            -1, -1, 80, 80, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, 36, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, 81, -1, -1,
            -1, -1, 81, 81, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, 82, -1, -1,
            -1, -1, 82, 82, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, -1, 135, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 135, 135, -1, -1,
            -1, 135, 135, 135, 135, 135, 135, -1,
            135, 135, 135, 135, 135, -1, 135, 135,
            -1, -1 ),
        array( -1, 143, 143, 143, 143, 143, 143, 143,
            143, 143, 143, 143, 143, 143, 143, 143,
            143, 143, 143, 143, 143, 143, 57, 143,
            143, 143, 143, 143, 143, 143, 143, 143,
            143, 143, 143, 143, 143, 143, 143, 143,
            143, 143, 143, 143, 143, 143, 143, 143,
            143, 143 ),
        array( -1, -1, -1, -1, -1, 85, -1, -1,
            -1, -1, 85, 85, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, 86, -1, -1,
            -1, -1, 86, 86, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, 87, -1, -1,
            -1, -1, 87, 87, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, 88, -1, -1,
            -1, -1, 88, 88, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, 90, -1, -1,
            -1, -1, 90, 90, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, 91, 91, 91, 91, 91, 91, 91,
            91, 91, 91, 91, 91, 91, 145, 91,
            91, 91, 91, 91, 91, 91, 91, 91,
            91, 91, 91, 91, 91, 91, 91, 91,
            91, 91, 91, 91, 91, 91, 91, 91,
            91, 91, 91, 91, 91, 91, 91, 91,
            91, 91 ),
        array( -1, -1, -1, 3, 3, 3, -1, 3,
            -1, 3, 3, 3, 3, 3, 3, 3,
            3, 3, 3, 3, 3, 3, 3, 3,
            3, 3, 3, 3, -1, -1, 3, 3,
            3, -1, -1, -1, -1, -1, -1, 3,
            -1, -1, -1, -1, -1, 3, -1, -1,
            3, 3 ),
        array( -1, 92, 3, 3, 3, 3, 3, 3,
            98, 3, 3, 3, 15, 3, 3, 3,
            3, 3, -1, 3, 3, 3, 3, 3,
            3, 3, 3, 3, 3, 3, 3, 3,
            3, 3, 3, 3, 3, 3, 3, 3,
            3, 3, 3, 3, 3, 3, 3, 3,
            3, 3 ),
        array( 1, 31, 31, 31, 31, 78, 34, 31,
            32, 35, 78, 78, 33, 31, 31, 31,
            31, 31, 31, 31, 31, 31, 31, 31,
            31, 31, 31, 31, 34, 34, 31, 31,
            31, 34, 34, 34, 34, 34, 34, 31,
            34, 34, 34, 34, 34, 31, 34, 34,
            31, 31 ),
        array( -1, 38, 38, 95, 38, 82, 95, 95,
            38, 38, 82, 82, -1, 38, 95, 38,
            38, 38, 38, 38, 38, 38, 38, -1,
            38, 38, 38, 38, 95, 95, 38, 38,
            38, 95, 95, 95, 95, 95, 95, 38,
            95, 95, 95, 95, 95, 95, 95, 95,
            38, 38 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, 136, -1, -1,
            -1, -1 ),
        array( -1, 144, 144, 144, 144, 144, 144, 144,
            144, 144, 144, 144, 144, 144, 144, 144,
            144, 144, 144, 144, 144, 144, 144, 89,
            144, 144, 144, 144, 144, 144, 144, 144,
            144, 144, 144, 144, 144, 144, 144, 144,
            144, 144, 144, 144, 144, 144, 144, 144,
            144, 144 ),
        array( -1, -1, -1, -1, -1, 3, -1, -1,
            -1, -1, 3, 3, -1, -1, -1, 3,
            3, -1, 3, -1, 3, -1, -1, -1,
            3, -1, -1, 3, -1, -1, -1, 3,
            3, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, 58, 59, -1,
            -1, -1, 58, 58, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 59, 59, -1, -1,
            -1, 59, 59, 59, 59, 59, 59, -1,
            59, 59, 59, 59, 59, -1, 59, 59,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, 105, 9, -1,
            -1, 106, 105, 105, 10, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 9, 9, -1, -1,
            -1, 9, 9, 9, 9, 9, 9, -1,
            9, 9, 9, 9, 9, -1, 9, 9,
            -1, -1 ),
        array( -1, 91, 91, 91, 91, 91, 91, 91,
            91, 91, 91, 91, 91, 91, 146, 91,
            91, 91, 91, 91, 91, 91, 91, 91,
            91, 91, 91, 91, 91, 91, 91, 91,
            91, 91, 91, 91, 91, 91, 91, 91,
            91, 91, 91, 91, 91, 91, 91, 91,
            91, 91 ),
        array( -1, -1, -1, -1, -1, -1, 11, -1,
            -1, -1, -1, -1, 12, -1, 107, 13,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 11, 11, -1, -1,
            -1, 11, 11, 11, 11, 11, 11, -1,
            11, 11, 11, 11, 11, -1, 11, 11,
            -1, -1 ),
        array( -1, 103, 103, 103, 103, 103, 103, 103,
            103, 103, 103, 103, 14, 103, 103, 103,
            103, 103, 103, 103, 103, 103, 103, 103,
            103, 103, 103, 103, 103, 103, 103, 103,
            103, 103, 103, 103, 103, 103, 103, 103,
            103, 103, 103, 103, 103, 103, 103, 103,
            103, 103 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 108, 104,
            16, 104, 104, 104, 104, 104, 104, -1,
            104, 104, 104, 104, 104, 104, 104, 104,
            17, -1 ),
        array( -1, -1, -1, -1, -1, 105, -1, -1,
            -1, 106, 105, 105, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            18, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, 19, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            16, -1, 110, -1, -1, -1, 110, -1,
            -1, -1, -1, -1, 110, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 111, 104,
            16, 104, 104, 104, 104, 104, 104, -1,
            104, 104, 104, 104, 104, 104, 104, 104,
            17, -1 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            16, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, -1, 113, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 113, 113, -1, -1,
            16, 113, 113, 113, 113, 113, 113, -1,
            113, 113, 113, 113, 113, -1, 113, 113,
            -1, -1 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 114, 104,
            16, 104, 104, 104, 104, 104, 104, -1,
            104, 104, 104, 104, 104, 104, 104, 104,
            17, -1 ),
        array( -1, -1, -1, 113, -1, -1, 113, 113,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 113, 113, -1, 113,
            20, 113, 113, 113, 113, 113, 113, -1,
            113, 113, 113, 113, 113, 113, 113, 113,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            21, -1, 110, -1, -1, -1, 110, -1,
            -1, -1, -1, -1, 110, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 116, 104,
            16, 104, 104, 104, 104, 104, 104, -1,
            104, 104, 104, 104, 104, 104, 104, 104,
            17, -1 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            22, -1, 110, -1, -1, -1, 110, -1,
            -1, -1, -1, -1, 110, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 118, 104,
            16, 104, 104, 104, 104, 104, 104, -1,
            104, 104, 104, 104, 104, 104, 104, 104,
            17, -1 ),
        array( -1, -1, 120, -1, -1, -1, 121, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 121, 121, -1, -1,
            16, 121, 121, 121, 121, 121, 121, -1,
            121, 121, 121, 121, 121, -1, 121, 121,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, -1, 122, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 122, 122, -1, -1,
            16, 122, 122, 122, 122, 122, 122, -1,
            122, 122, 122, 122, 122, -1, 122, 122,
            -1, -1 ),
        array( -1, 120, 123, 120, 120, 120, 120, 120,
            120, 120, 120, 120, 120, 120, 120, 120,
            120, 120, 120, 120, 120, 120, 120, 120,
            120, 120, 120, 120, 120, 120, 120, 120,
            120, 120, 120, 120, 120, 120, 120, 120,
            120, 120, 120, 120, 120, 120, 120, 120,
            120, 120 ),
        array( -1, -1, -1, 121, -1, -1, 121, 121,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 121, 121, -1, 121,
            23, 121, 121, 121, 121, 121, 121, -1,
            121, 121, 121, 121, 121, 121, 121, 121,
            -1, -1 ),
        array( -1, -1, -1, 122, -1, -1, 122, 122,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 122, 122, -1, 122,
            24, 122, 122, 122, 122, 122, 122, 124,
            122, 122, 122, 122, 122, 122, 122, 122,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            25, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, -1, 125, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 125, 125, -1, -1,
            -1, 125, 125, 125, 125, 125, 125, -1,
            125, 125, 125, 125, 125, -1, 125, 125,
            -1, -1 ),
        array( -1, -1, -1, 125, -1, -1, 125, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 125, 125, -1, 125,
            26, 125, 125, 125, 125, 125, 125, 126,
            125, 125, 125, 125, 125, 125, 125, 125,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, -1, 127, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 127, 127, -1, -1,
            -1, 127, 127, 127, 127, 127, 127, -1,
            127, 127, 127, 127, 127, -1, 127, 127,
            -1, -1 ),
        array( -1, -1, -1, 127, -1, -1, 127, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 127, 127, -1, 127,
            27, 127, 127, 127, 127, 127, 127, -1,
            127, 127, 127, 127, 127, 127, 127, 127,
            -1, -1 ),
        array( 1, 28, 28, 28, 28, 28, 28, 28,
            28, 28, 28, 28, 28, 28, 28, -1,
            -1, 28, 28, -1, -1, 28, 29, 28,
            28, 28, 28, -1, 28, 28, 28, 28,
            28, 28, 28, 28, 28, 28, 28, 28,
            28, 28, 28, 28, 28, 28, 28, 28,
            28, 28 ),
        array( 1, 38, 38, 39, 38, -1, 159, 159,
            79, 40, 31, -1, 41, 38, 159, 38,
            38, 38, 38, 38, 38, 38, 42, 43,
            38, 38, 38, 38, 159, 159, 38, 38,
            38, 159, 159, 159, 159, 159, 159, 38,
            159, 159, 159, 159, 159, 39, 159, 159,
            38, 38 ),
        array( 1, -1, -1, -1, -1, 44, -1, -1,
            -1, -1, 44, 44, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( 1, 45, 45, 45, 45, -1, 45, 45,
            45, 45, 45, -1, 46, 45, 45, 45,
            45, 45, 45, 45, 45, 45, 45, 45,
            45, 45, 45, 45, 45, 45, 45, 45,
            45, 45, 45, 45, 45, 45, 45, 45,
            45, 45, 45, 45, 45, 45, 45, 45,
            45, 45 ),
        array( 1, 47, 47, 47, 47, 47, 47, 47,
            47, 47, 47, 47, 47, 47, 47, 47,
            47, 47, 83, 47, 134, 47, 47, 48,
            47, 47, 96, 47, 47, 47, 47, 47,
            47, 47, 47, 47, 47, 47, 47, 47,
            47, 47, 47, 47, 47, 47, 47, 47,
            47, 47 ),
        array( -1, 47, 47, 47, 47, 47, 47, 47,
            47, 47, 47, 47, 47, 47, 47, 47,
            47, 47, 47, 47, -1, 47, 47, -1,
            47, 47, 47, 47, 47, 47, 47, 47,
            47, 47, 47, 47, 47, 47, 47, 47,
            47, 47, 47, 47, 47, 47, 47, 47,
            47, 47 ),
        array( -1, -1, -1, 135, -1, -1, 135, 135,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, 137, -1, 135, 135, 138, 135,
            49, 135, 135, 135, 135, 135, 135, -1,
            135, 135, 135, 135, 135, 135, 135, 135,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, 162, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, 139, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, 140, -1, -1, -1, -1, -1,
            49, -1, 141, -1, -1, -1, 141, -1,
            -1, -1, -1, -1, 141, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, 49, -1, -1, -1, -1, -1, 49,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, 140, -1, -1, -1, -1, -1,
            49, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( 1, 50, 50, 51, 50, -1, 52, 53,
            50, 50, 50, -1, 54, 50, 53, 55,
            50, 50, 50, 50, 50, 50, 84, 97,
            50, 50, 99, 50, 52, 52, 50, 50,
            50, 52, 52, 52, 52, 52, 52, 50,
            52, 52, 52, 52, 52, 51, 52, 52,
            50, 50 ),
        array( -1, 91, 91, 91, 91, 91, 91, 91,
            91, 91, 91, 91, 91, 91, -1, 91,
            91, 91, 91, 91, 91, 91, 91, 91,
            91, 91, 91, 91, 91, 91, 91, 91,
            91, 91, 91, 91, 91, 91, 91, 91,
            91, 91, 91, 91, 91, 91, 91, 91,
            91, 91 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 61, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( 1, 62, 62, 62, 62, 62, 62, 62,
            62, 62, 62, 62, 62, 62, 62, 62,
            63, 62, 62, 62, 62, 62, 62, 62,
            62, 62, 62, 62, 62, 62, 62, 62,
            62, 62, 62, 62, 62, 62, 62, 62,
            62, 62, 62, 62, 62, 62, 62, 62,
            62, 62 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 64, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( 1, -1, 150, -1, -1, -1, 151, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 151, 151, -1, -1,
            -1, 151, 151, 151, 151, 151, 151, -1,
            151, 151, 151, 151, 151, -1, 151, 151,
            -1, -1 ),
        array( -1, 150, 152, 150, 150, 150, 150, 150,
            150, 150, 150, 150, 150, 150, 150, 150,
            150, 150, 150, 150, 150, 150, 150, 150,
            150, 150, 150, 150, 150, 150, 150, 150,
            150, 150, 150, 150, 150, 150, 150, 150,
            150, 150, 150, 150, 150, 150, 150, 150,
            150, 150 ),
        array( -1, -1, -1, 151, -1, -1, 151, 151,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 151, 151, -1, 151,
            -1, 151, 151, 151, 151, 151, 151, 65,
            151, 151, 151, 151, 151, 151, 151, 151,
            -1, 153 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, 66,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, 154 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, 155, -1, -1, -1, -1, -1,
            65, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, 163, -1, -1, -1, -1, -1,
            66, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, 156, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, 67, -1, -1, -1, -1, -1, 67,
            -1, -1 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, 68, -1, -1, -1, -1, -1, 68,
            -1, -1 ),
        array( -1, 92, 3, 3, 3, 3, 3, 3,
            98, 3, 3, 3, 3, 3, 3, 3,
            93, 3, -1, 3, 3, 3, 3, 3,
            3, 3, 3, 3, 3, 3, 3, 3,
            3, 3, 3, 3, 3, 3, 3, 3,
            3, 3, 3, 3, 3, 3, 3, 3,
            3, 3 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 109, 108, 104,
            16, 104, 104, 104, 104, 104, 104, -1,
            176, 104, 104, 104, 104, 104, 104, 104,
            17, -1 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 119, 104,
            16, 104, 104, 104, 104, 104, 104, -1,
            104, 104, 104, 104, 104, 104, 104, 104,
            17, -1 ),
        array( -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, 157, -1, -1,
            -1, -1 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 108, 104,
            16, 104, 104, 104, 104, 104, 104, -1,
            104, 112, 104, 104, 104, 104, 104, 104,
            17, -1 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 108, 104,
            16, 104, 104, 115, 104, 104, 104, -1,
            104, 104, 104, 104, 104, 104, 104, 104,
            17, -1 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 108, 104,
            16, 104, 104, 117, 104, 104, 104, -1,
            104, 104, 104, 104, 104, 104, 104, 104,
            17, -1 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 108, 104,
            16, 104, 104, 104, 104, 104, 161, -1,
            104, 104, 104, 104, 104, 104, 104, 104,
            17, -1 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 108, 104,
            16, 104, 104, 104, 104, 104, 104, -1,
            164, 104, 169, 104, 104, 104, 104, 104,
            17, -1 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 108, 104,
            16, 104, 104, 104, 104, 104, 104, -1,
            104, 104, 104, 165, 104, 104, 104, 104,
            17, -1 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 108, 104,
            16, 104, 104, 104, 104, 104, 104, -1,
            104, 166, 104, 104, 104, 104, 104, 104,
            17, -1 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 108, 104,
            16, 104, 104, 104, 104, 167, 104, -1,
            104, 104, 104, 104, 104, 104, 104, 104,
            17, -1 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 108, 104,
            16, 104, 104, 104, 104, 104, 104, -1,
            104, 104, 104, 104, 170, 104, 104, 104,
            17, -1 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 108, 104,
            16, 104, 104, 104, 171, 104, 104, -1,
            104, 104, 104, 104, 104, 104, 104, 104,
            17, -1 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 108, 104,
            16, 104, 104, 104, 104, 104, 104, -1,
            104, 104, 172, 104, 104, 104, 104, 104,
            17, -1 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 108, 104,
            16, 104, 104, 173, 104, 104, 104, -1,
            104, 104, 104, 104, 104, 104, 104, 104,
            17, -1 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 108, 104,
            16, 104, 104, 104, 104, 174, 104, -1,
            104, 104, 104, 104, 104, 104, 104, 104,
            17, -1 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 108, 104,
            16, 104, 175, 104, 104, 104, 104, -1,
            104, 104, 104, 104, 104, 104, 104, 104,
            17, -1 ),
        array( -1, -1, -1, 104, -1, -1, 104, 104,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 104, 104, 108, 104,
            16, 177, 104, 104, 104, 104, 104, -1,
            104, 104, 104, 104, 104, 104, 104, 104,
            17, -1 )
        );


    function  yylex()
    {
        $yy_lookahead = '';
        $yy_anchor = YY_NO_ANCHOR;
        $yy_state = $this->yy_state_dtrans[$this->yy_lexical_state];
        $yy_next_state = YY_NO_STATE;
         $yy_last_accept_state = YY_NO_STATE;
        $yy_initial = true;
        $yy_this_accept = 0;
        
        $this->yy_mark_start();
        $yy_this_accept = $this->yy_acpt[$yy_state];
        if (YY_NOT_ACCEPT != $yy_this_accept) {
            $yy_last_accept_state = $yy_state;
            $this->yy_buffer_end = $this->yy_buffer_index;
        }
        while (true) {
            if ($yy_initial && $this->yy_at_bol) {
                $yy_lookahead =  YY_BOL;
            } else {
                $yy_lookahead = $this->yy_advance();
            }
            $yy_next_state = $this->yy_nxt[$this->yy_rmap[$yy_state]][$this->yy_cmap[$yy_lookahead]];
            if (YY_EOF == $yy_lookahead && $yy_initial) {
                return false;            }
            if (YY_F != $yy_next_state) {
                $yy_state = $yy_next_state;
                $yy_initial = false;
                $yy_this_accept = $this->yy_acpt[$yy_state];
                if (YY_NOT_ACCEPT != $yy_this_accept) {
                    $yy_last_accept_state = $yy_state;
                    $this->yy_buffer_end = $this->yy_buffer_index;
                }
            } else {
                if (YY_NO_STATE == $yy_last_accept_state) {
                    echo "Lexical Error: Unmatched Input.";exit;
                } else {
                    $yy_anchor = $this->yy_acpt[$yy_last_accept_state];
                    if (0 != (YY_END & $yy_anchor)) {
                        $this->yy_move_end();
                    }
                    $this->yy_to_mark();
                    if ($yy_last_accept_state < 0) {
                       if ($yy_last_accept_state < 179) {
                           $this->yy_error(YY_E_INTERNAL, false);
                       }
                    } else {

                        switch ($yy_last_accept_state) {
case 2:
{
    $this->error(0,"ERROR: unexpected something: (".$this->yytext() .") character: 0x" . dechex(ord($this->yytext())));
    return HTML_TEMPLATE_FLEXY_ERROR;
}
case 3:
{
    //abcd -- data characters  
    // { added for flexy
    $this->value = HTML_Template_Flexy_Token::create('Text',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 4:
{
    // &abc;
    $this->value = HTML_Template_Flexy_Token::create('Ref',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 5:
{
    //<name -- start tag */
     $this->tagName = trim(substr($this->yytext(),1));
    $this->tokenName = 'Tag';
    $this->value = '';
    $this->attributes = array();
    $this->yybegin(IN_ATTR);
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 6:
{  
    // <> -- empty start tag */
    $this->error(0,"empty tag"); 
    return HTML_TEMPLATE_FLEXY_ERROR;
}
case 7:
{
    // &#123;
    $this->value = HTML_Template_Flexy_Token::create('Ref',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 8:
{
    // &#abc;
    $this->value = HTML_Template_Flexy_Token::create('Ref',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 9:
{
    /* </title> -- end tag */
    $this->tagName = trim(substr($this->yytext(),1));
    $this->tokenName = 'EndTag';
    $this->yybegin(IN_ENDTAG);
    $this->value = '';
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 10:
{
	/* </> -- empty end tag */		
    $this->error(0,"empty end tag not handled");
    return HTML_TEMPLATE_FLEXY_ERROR;
}
case 11:
{
    /* <!DOCTYPE -- markup declaration */
    $this->value = HTML_Template_Flexy_Token::create('Doctype',$this->yytext(),$this->yyline);
    $this->yybegin(IN_MD);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 12:
{ 
    /* <!> */
    $this->error(SGML_ERROR,"empty markup tag not handled"); 
    return HTML_TEMPLATE_FLEXY_ERROR;
}
case 13:
{
    /* <![ -- marked section */
    $this->error(SGML_ERROR,"marked section not handled"); 
    return HTML_TEMPLATE_FLEXY_ERROR;
}
case 14:
{ 
    /* <? ...> -- processing instruction */
    // this is a little odd cause technically we dont allow it!!
    // really we only want to handle < ? xml 
    $this->value = HTML_Template_Flexy_Token::create('PHP',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK; 
}
case 15:
{ 
    /* ]]> -- marked section end */
    $this->error(SGML_ERROR,"unmatched marked sections end"); 
    return HTML_TEMPLATE_FLEXY_ERROR;
}
case 16:
{
    $this->value = HTML_Template_Flexy_Token::create('Var'  , $this->yytext(), $this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 17:
{
    $this->value =  '';
    $this->flexyMethod = substr($this->yytext(),1,-1);
    $this->flexyArgs = array();
    $this->yybegin(IN_FLEXYMETHOD);
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 18:
{
    /* </name <  -- unclosed end tag */
    $this->error(0,"Unclosed  end tag");
    return HTML_TEMPLATE_FLEXY_ERROR;
}
case 19:
{
    /* <!--  -- comment declaration */
    $this->value = HTML_Template_Flexy_Token::create('Comment',$this->yytext(),$this->yyline);
    $this->yybegin(IN_COM);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 20:
{
    $this->value = HTML_Template_Flexy_Token::create('If',substr($this->yytext(),4,-1),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 21:
{
    $this->value = HTML_Template_Flexy_Token::create('End', '',$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 22:
{
    $this->value = HTML_Template_Flexy_Token::create('Else', '',$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 23:
{
    $this->value = HTML_Template_Flexy_Token::create('Include', substr($this->yytext(),8,-1),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 24:
{
    $this->value = HTML_Template_Flexy_Token::create('Foreach',array(substr($this->yytext(),9,-1)),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 25:
{
    $this->value = HTML_Template_Flexy_Token::create('Include', substr($this->yytext(),8,-1),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 26:
{
    $this->value = HTML_Template_Flexy_Token::create('Foreach', explode(',',substr($this->yytext(),9,-1)),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 27:
{
    $this->value = HTML_Template_Flexy_Token::create('Foreach',  explode(',',substr($this->yytext(),9,-1)),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 28:
{
    $this->attrVal[] = $this->yytext();
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 29:
{
    $this->attrVal[] = "'";
    //var_dump($this->attrVal);
    $s = "";
    foreach($this->attrVal as $v) {
        if (!is_string($v)) {
            $this->attributes[$this->attrKey] = $this->attrVal;
            $this->yybegin(IN_ATTR);
            return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
        }
        $s .= $v;
    }
    $this->attributes[$this->attrKey] = $s;
    $this->yybegin(IN_ATTR);
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 30:
{
    $this->value = '';
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 31:
{
    $this->error(0,"ERROR: unexpected : character in tag: (".$this->yytext().") 0x" . dechex(ord($this->yytext())));
    return HTML_TEMPLATE_FLEXY_ERROR;
}
case 32:
{
    // <foo^<bar> -- unclosed start tag */
    $this->error(0,"Unclosed tags not supported"); 
    return HTML_TEMPLATE_FLEXY_ERROR;
}
case 33:
{
    $this->value = HTML_Template_Flexy_Token::create($this->tokenName,
        array($this->tagName,$this->attributes),
        $this->yyline);
    $this->yybegin(YYINITIAL);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 34:
{
    // <img src="xxx" ^ismap> -- name */
    $this->attributes[trim($this->yytext())] = null;
    $this->value = '';
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 35:
{
    $this->yybegin(IN_NETDATA);
    $this->attributes["/"] = null;
    $this->value = '';
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 36:
{
   // <a ^href = "xxx"> -- attribute name 
    $this->attrKey = substr(trim($this->yytext()),0,-1);
    $this->yybegin(IN_ATTRVAL);
    $this->value = '';
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 37:
{
    $this->attributes["/"] = null;
    $this->value = HTML_Template_Flexy_Token::create($this->tokenName,
        array($this->tagName,$this->attributes),
        $this->yyline);
    $this->yybegin(YYINITIAL);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 38:
{
    // <a href = ^http://foo/> -- unquoted literal HACK */                          
    $this->attributes[$this->attrKey] = trim($this->yytext());
    $this->yybegin(IN_ATTR);
    //   $this->error(SGML_ERROR,"attribute value needs quotes");
    $this->value = '';
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 39:
{
    // <a name = ^12pt> -- number token */
    $this->attributes[$this->attrKey] = trim($this->yytext());
    $this->yybegin(IN_ATTR);
    $this->value = '';
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 40:
{
    $this->error(0,"attribute value missing"); 
    return HTML_TEMPLATE_FLEXY_ERROR;
}
case 41:
{ 
    $this->error(0, "Tag close found where attribute value expected"); 
    return HTML_TEMPLATE_FLEXY_ERROR;
}
case 42:
{
    $this->attrVal = array( "'");
    $this->yybegin(IN_SINGLEQUOTE);
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 43:
{
    //echo "START QUOTE";
    $this->attrVal =array("\"");
    $this->yybegin(IN_DOUBLEQUOTE);
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 44:
{ 
    // whitespace switch back to IN_ATTR MODE.
    $this->value = '';
    $this->yybegin(IN_ATTR);
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 45:
{ 
    $this->error(0,"extraneous character in end tag"); 
    return HTML_TEMPLATE_FLEXY_ERROR;
}
case 46:
{ 
    $this->value = HTML_Template_Flexy_Token::create($this->tokenName,
        array($this->tagName),
        $this->yyline);
        array($this->tagName);
    $this->yybegin(YYINITIAL);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 47:
{
    //echo "GOT DATA:".$this->yytext();
    $this->attrVal[] = $this->yytext();
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 48:
{
    //echo "GOT END DATA:".$this->yytext();
    $this->attrVal[] = "\"";
    $s = "";
    foreach($this->attrVal as $v) {
        if (!is_string($v)) {
            $this->attributes[$this->attrKey] = $this->attrVal;
            $this->yybegin(IN_ATTR);
            return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
        }
        $s .= $v;
    }
    $this->attributes[$this->attrKey] = $s;
    $this->yybegin(IN_ATTR);
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 49:
{
    $this->attrVal[] = HTML_Template_Flexy_Token::create('Var'  , $this->yytext(), $this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 50:
{
    $this->error(0, "illegal character in markup declaration");
    return HTML_TEMPLATE_FLEXY_ERROR;
}
case 51:
{   
    $this->value = HTML_Template_Flexy_Token::create('Number',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK; 
}
case 52:
{ 
    $this->value = HTML_Template_Flexy_Token::create('Name',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK; 
}
case 53:
{ 
    $this->value = HTML_Template_Flexy_Token::create('NameT',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK; 
}
case 54:
{   
    $this->value = HTML_Template_Flexy_Token::create('CloseTag',$this->yytext(),$this->yyline);
    $this->yybegin(YYINITIAL); 
    return HTML_TEMPLATE_FLEXY_TOKEN_OK; 
}
case 55:
{
    // <!doctype foo ^[  -- declaration subset */
    $this->value = HTML_Template_Flexy_Token::create('BeginDS',$this->yytext(),$this->yyline);
    $this->yybegin(IN_DS);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 56:
{ 
    $this->value = HTML_Template_Flexy_Token::create('NumberT',$this->yytext(),$this->yyline);    
    return HTML_TEMPLATE_FLEXY_TOKEN_OK; 
}
case 57:
{ 
    $this->value = HTML_Template_Flexy_Token::create('Literal',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK; 
}
case 58:
{
    // <!entity ^% foo system "..." ...> -- parameter entity definition */
    $this->value = HTML_Template_Flexy_Token::create('EntityPar',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 59:
{
    // <!doctype ^%foo;> -- parameter entity reference */
    $this->value = HTML_Template_Flexy_Token::create('EntityRef',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 60:
{
    // <!^--...-->   -- comment */   
    $this->value = HTML_Template_Flexy_Token::create('Comment',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 61:
{   
    $this->value = HTML_Template_Flexy_Token::create('CloseTag',$this->yytext(),$this->yyline);
    $this->yybegin(YYINITIAL); 
    return HTML_TEMPLATE_FLEXY_TOKEN_OK; 
}
case 62:
{ 
    $this->value = HTML_Template_Flexy_Token::create('Declaration',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 63:
{ 
    // ] -- declaration subset close */
    $this->value = HTML_Template_Flexy_Token::create('DSEndSubset',$this->yytext(),$this->yyline);
    $this->yybegin(IN_COM); 
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 64:
{
    // ]]> -- marked section end */
     $this->value = HTML_Template_Flexy_Token::create('DSEnd',$this->yytext(),$this->yyline);
    $this->yybegin(YYINITIAL);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 65:
{
    $t = $this->yytext();
    if ($t{stlen($t-1)} == ",") {
        // add argument
        $this->flexyArgs[] = substr($t,0,-1);
        return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
    }
    $this->flexyArgs[] = substr($t,0,-2);
    $this->value = HTML_Template_Flexy_Token::create('Method'  , array($this->flexyMethod,$this->flexyArgs), $this->yyline);
    $this->yybegin(YYINITIAL);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 66:
{
    $t = $this->yytext();
    if ($t{stlen($t-1)} == ",") {
        // add argument
        $this->flexyArgs[] = substr($t,0,-1);
        return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
    }
    $this->flexyArgs[] = substr($t,0,-1);
    $this->value = HTML_Template_Flexy_Token::create('Method'  , array($this->flexyMethod,$this->flexyArgs), $this->yyline);
    $this->yybegin(YYINITIAL);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 67:
{
    $t = $this->yytext();
    if ($t{stlen($t-1)} == ",") {
        // add argument
        $this->flexyArgs[] = substr($t,0,-1);
        return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
    }
    $this->flexyArgs[] = substr($t,0,-2);
    $this->attrVal[] = HTML_Template_Flexy_Token::create('Method'  , array($this->flexyMethod,$this->flexyArgs), $this->yyline);
    $this->yybegin($this->flexyMethodState);
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 68:
{
    $t = $this->yytext();
    if ($t{stlen($t-1)} == ",") {
        // add argument
        $this->flexyArgs[] = substr($t,0,-1);
        return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
    }
    $this->flexyArgs[] = substr($t,0,-1);
    $this->attrVal[] = HTML_Template_Flexy_Token::create('Method'  , array($this->flexyMethod,$this->flexyArgs), $this->yyline);
    $this->yybegin($this->flexyMethodState);
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 70:
{
    $this->error(0,"ERROR: unexpected something: (".$this->yytext() .") character: 0x" . dechex(ord($this->yytext())));
    return HTML_TEMPLATE_FLEXY_ERROR;
}
case 71:
{
    //abcd -- data characters  
    // { added for flexy
    $this->value = HTML_Template_Flexy_Token::create('Text',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 72:
{
    // &abc;
    $this->value = HTML_Template_Flexy_Token::create('Ref',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 73:
{
    //<name -- start tag */
     $this->tagName = trim(substr($this->yytext(),1));
    $this->tokenName = 'Tag';
    $this->value = '';
    $this->attributes = array();
    $this->yybegin(IN_ATTR);
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 74:
{
    // &#123;
    $this->value = HTML_Template_Flexy_Token::create('Ref',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 75:
{
    // &#abc;
    $this->value = HTML_Template_Flexy_Token::create('Ref',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 76:
{
    /* </title> -- end tag */
    $this->tagName = trim(substr($this->yytext(),1));
    $this->tokenName = 'EndTag';
    $this->yybegin(IN_ENDTAG);
    $this->value = '';
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 77:
{
    /* <!DOCTYPE -- markup declaration */
    $this->value = HTML_Template_Flexy_Token::create('Doctype',$this->yytext(),$this->yyline);
    $this->yybegin(IN_MD);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 78:
{
    $this->value = '';
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 79:
{
    // <foo^<bar> -- unclosed start tag */
    $this->error(0,"Unclosed tags not supported"); 
    return HTML_TEMPLATE_FLEXY_ERROR;
}
case 80:
{
    // <img src="xxx" ^ismap> -- name */
    $this->attributes[trim($this->yytext())] = null;
    $this->value = '';
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 81:
{
    // <a href = ^http://foo/> -- unquoted literal HACK */                          
    $this->attributes[$this->attrKey] = trim($this->yytext());
    $this->yybegin(IN_ATTR);
    //   $this->error(SGML_ERROR,"attribute value needs quotes");
    $this->value = '';
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 82:
{
    // <a name = ^12pt> -- number token */
    $this->attributes[$this->attrKey] = trim($this->yytext());
    $this->yybegin(IN_ATTR);
    $this->value = '';
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 83:
{
    //echo "GOT DATA:".$this->yytext();
    $this->attrVal[] = $this->yytext();
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 84:
{
    $this->error(0, "illegal character in markup declaration");
    return HTML_TEMPLATE_FLEXY_ERROR;
}
case 85:
{   
    $this->value = HTML_Template_Flexy_Token::create('Number',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK; 
}
case 86:
{ 
    $this->value = HTML_Template_Flexy_Token::create('Name',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK; 
}
case 87:
{ 
    $this->value = HTML_Template_Flexy_Token::create('NameT',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK; 
}
case 88:
{ 
    $this->value = HTML_Template_Flexy_Token::create('NumberT',$this->yytext(),$this->yyline);    
    return HTML_TEMPLATE_FLEXY_TOKEN_OK; 
}
case 89:
{ 
    $this->value = HTML_Template_Flexy_Token::create('Literal',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK; 
}
case 90:
{
    // <!doctype ^%foo;> -- parameter entity reference */
    $this->value = HTML_Template_Flexy_Token::create('EntityRef',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 91:
{
    // <!^--...-->   -- comment */   
    $this->value = HTML_Template_Flexy_Token::create('Comment',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 93:
{
    //abcd -- data characters  
    // { added for flexy
    $this->value = HTML_Template_Flexy_Token::create('Text',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 94:
{
    $this->value = '';
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 95:
{
    // <a name = ^12pt> -- number token */
    $this->attributes[$this->attrKey] = trim($this->yytext());
    $this->yybegin(IN_ATTR);
    $this->value = '';
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 96:
{
    //echo "GOT DATA:".$this->yytext();
    $this->attrVal[] = $this->yytext();
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}
case 97:
{
    $this->error(0, "illegal character in markup declaration");
    return HTML_TEMPLATE_FLEXY_ERROR;
}
case 99:
{
    $this->error(0, "illegal character in markup declaration");
    return HTML_TEMPLATE_FLEXY_ERROR;
}
case 101:
{
    $this->error(0, "illegal character in markup declaration");
    return HTML_TEMPLATE_FLEXY_ERROR;
}
case 158:
{
    //abcd -- data characters  
    // { added for flexy
    $this->value = HTML_Template_Flexy_Token::create('Text',$this->yytext(),$this->yyline);
    return HTML_TEMPLATE_FLEXY_TOKEN_OK;
}
case 159:
{
    // <a name = ^12pt> -- number token */
    $this->attributes[$this->attrKey] = trim($this->yytext());
    $this->yybegin(IN_ATTR);
    $this->value = '';
    return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
}

                        }
                    }
                    $yy_initial = true;
                    $yy_state = $this->yy_state_dtrans[$this->yy_lexical_state];
                    $yy_next_state = YY_NO_STATE;
                    $yy_last_accept_state = YY_NO_STATE;
                    $this->yy_mark_start();
                    $yy_this_accept = $this->yy_acpt[$yy_state];
                    if (YY_NOT_ACCEPT != $yy_this_accept) {
                        $yy_last_accept_state = $yy_state;
                        $this->yy_buffer_end = $this->yy_buffer_index;
                    }
                }
            }
        }
        return HTML_TEMPLATE_FLEXY_TOKEN_NONE;
    }
}
